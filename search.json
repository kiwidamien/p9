[
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "p9",
    "section": "",
    "text": ":::: {.columns}\n\n\nSeries\n\nggplot2-series\nThis series contains a great deal of tips, tricks and packages that you can use to level up your ggplot game.\n\n\n\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nChanging labels to percentages\n\n\n\n\n\n\ndata-vis\n\n\nplotnine\n\n\nsnippet\n\n\n\nCustomizing the labels on a scale is one of the things that is different from ggplot. We use a function to format the label.\n\n\n\n\n\nApr 29, 2024\n\n\n1 min\n\n\n\n\n\n\n\nMaking manual error bars / error regions\n\n\n\n\n\n\ndata-vis\n\n\nplotnine\n\n\nsnippet\n\n\n\nShows how to add error bars/regions manually to plots, both as a region of uncertainty, and on individual data points.\n\n\n\n\n\nApr 28, 2024\n\n\n1 min\n\n\n\n\n\n\n\nMaking dual bar charts\n\n\n\n\n\n\ndata-vis\n\n\nplotnine\n\n\nsnippet\n\n\n\nPopulations pyramids often show not just the number of people in each age bracket, but also seggregate it by gender.\n\n\n\n\n\nApr 28, 2024\n\n\n1 min\n\n\n\n\n\n\n\nForcing Variables to be Categorical\n\n\n\n\n\n\ndata-vis\n\n\nplotnine\n\n\nsnippet\n\n\n\nPlotnine will treat numeric quantities as continuous, and generators continuous legends. We can use ‘factor’ to force the variable to be treated as cateogrical.\n\n\n\n\n\nApr 28, 2024\n\n\n1 min\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nApr 27, 2024\n\n\n1 min\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nApr 24, 2024\n\n\n1 min\n\n\n\n\n\n\n\nThis is a dummy blog posts\n\n\n\n\n\n\n123\n\n\nSecond Tag\n\n\n\nThis is a test post. In this post, I try out different functionalities\n\n\n\n\n\nJun 1, 2022\n\n\n1 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/ggplot2-tips/dual_bar/dual_bar.html",
    "href": "posts/ggplot2-tips/dual_bar/dual_bar.html",
    "title": "Making dual bar charts",
    "section": "",
    "text": "Problem\nShow a bar chart in two different directions from the central dividing line (two bars).\nThe typical example is showing the male and female population by age bracket in a population pyramid.\n\n\nSolution\n\n\nExample 1\n\nimport pandas as pd\nimport plotnine as p9\n\npop = (\n    pd.read_csv('2022_acs_us_pop.csv')\n    [['age_bracket_label', 'pop_male', 'pop_female']]\n    .rename(\n        columns={'pop_male': 'male', 'pop_female': 'female'}\n    ).melt(\n        'age_bracket_label',\n        var_name='gender',\n        value_name='population'\n    )\n)\npop.head()\n\n\n\n\n\n\n\n\n\nage_bracket_label\ngender\npopulation\n\n\n\n\n0\nUnder 5 years\nmale\n9725644\n\n\n1\n5 to 9 years\nmale\n10210019\n\n\n2\n10 to 14 years\nmale\n10974635\n\n\n3\n15 to 19 years\nmale\n11196816\n\n\n4\n20 to 24 years\nmale\n11400730\n\n\n\n\n\n\n\n\n\n(\n    p9.ggplot(pop, p9.aes(x='age_bracket_label', y='population', fill='gender'))\n    + p9.geom_bar(stat='identity')\n)\n\n\n\n\n\n\n\n\n\npop['signed_pop'] = pop.apply(lambda row:  row.population if row.gender == 'male'  else -row.population, axis=1)\n# We are ending one side of the rectangle on 0,\n# and the other side on 'signed_pop', so the center is \n# half of the signed_pop\npop['center'] = pop['signed_pop'] / 2\n\n\npop.age_bracket_label.unique().tolist()\n\n['Under 5 years',\n '5 to 9 years',\n '10 to 14 years',\n '15 to 19 years',\n '20 to 24 years',\n '25 to 29 years',\n '30 to 34 years',\n '35 to 39 years',\n '40 to 44 years',\n '45 to 49 years',\n '50 to 54 years',\n '55 to 59 years',\n '60 to 64 years',\n '65 to 69 years',\n '70 to 74 years',\n '75 to 79 years',\n '80 to 84 years',\n '85 years and over']\n\n\nThe p9.geom_tile takes an x, y, width and height to draw a filled rectangle. The x and y positions are the locations are the “center” of the rectangle, which is why we have calculated the center attribute.\n\n(\n    p9.ggplot(pop, p9.aes(x='age_bracket_label', y='population', fill='gender'))\n    + p9.geom_tile(mapping=p9.aes(y='center', width=1, height='signed_pop'))\n)\n\n\n\n\n\n\n\n\nWe can rotate the text, but let’s swap the axes. We will also order the categories correctly.\n\n(\n    p9.ggplot(pop, p9.aes(y='age_bracket_label', x='population', fill='gender'))\n    + p9.geom_tile(mapping=p9.aes(x='center', height=1, width='signed_pop'))\n    + p9.labs(y=\"\")\n    # This gets the order the same as they appear in the dataframe\n    # (otherwise is alphabetical)\n    + p9.scale_y_discrete(limits=pop.age_bracket_label.unique().tolist())\n)\n\n\n\n\n\n\n\n\nLet’s also format the population, so we are not showing the female population as negative\n\n(\n    p9.ggplot(pop, p9.aes(y='age_bracket_label', x='population', fill='gender'))\n    + p9.geom_tile(mapping=p9.aes(x='center', height=0.9, width='signed_pop'), alpha=0.6)\n    + p9.labs(y=\"\", title=\"Population Pyramid (US 2022)\")\n    # This gets the order the same as they appear in the dataframe\n    # (otherwise is alphabetical)\n    + p9.scale_y_discrete(limits=pop.age_bracket_label.unique().tolist())\n    + p9.scale_x_continuous(labels=lambda labs: [f\"{abs(l/1e6):.0f} M\" for l in labs])\n    + p9.theme_linedraw()\n    + p9.theme(panel_border=p9.element_blank())\n)\n\n\n\n\n\n\n\n\n\n\nExample 2\nThis example is taken from the ggplot examples of Albert Rapp (the original post is called “How to create diverging bar plots”)."
  },
  {
    "objectID": "posts/ggplot2-tips/making-percentage-labels.html",
    "href": "posts/ggplot2-tips/making-percentage-labels.html",
    "title": "Changing labels to percentages",
    "section": "",
    "text": "Problem\nWe want to apply custom formatting to the labels on an axis.\nThe bad news is that we don’t have a shortcut for common formatters (e.g. percentages), but the good news is that we have a method that allows us a lot of flexibility.\n\n\nSolution\nWe need a function that takes an iterable of labels we have by default, and outputs an iterable of formatted labels (in the same order). For example\ndef percent_formatter(list_of_labels: list[str]) -&gt; list[str]:\n    return [f\"{label:.0%}\" for label in list_of_labels]\nWe can then pass this into one of the scale functions as the labels parameter, for example\np9.scale_x_continuous(labels=percent_formatter)\nBecause the formatters are frequently pretty simple, they are often implemented as lambda functions, rather than standalone functions.\n\n\nExample\nOur example is going to be pretty straightforward – looking at the rating distribution for a single product on Amazon.\n\nimport plotnine as p9\nimport pandas as pd\n\n\nlens_review = pd.DataFrame([\n    {'stars': 5, 'num_customers': 121},\n    {'stars': 4, 'num_customers': 6},\n    {'stars': 3, 'num_customers': 0},\n    {'stars': 2, 'num_customers': 1},\n    {'stars': 1, 'num_customers': 3}\n])\n\nlens_review['frac_customers'] = lens_review['num_customers'] / lens_review['num_customers'].sum()\n\n\n(\n    p9.ggplot(lens_review, p9.aes(x='stars', y='frac_customers'))\n    + p9.geom_bar(stat='identity')\n)\n\n\n\n\n\n\n\n\nLet’s make the y axis formatted as percentages\n\n(\n    p9.ggplot(lens_review, p9.aes(x='stars', y='frac_customers'))\n    + p9.geom_bar(stat='identity')\n    + p9.scale_y_continuous(labels=lambda labels: [f\"{label:.0%}\" for label in labels])\n)\n\n\n\n\n\n\n\n\nWe can also make it more similar to the Amazon reviews by flipping the axes, and removing some of the distracting background\n\n(\n    p9.ggplot(lens_review, p9.aes(x='stars', y='frac_customers'))\n    + p9.geom_bar(stat='identity', width=0.8, fill='orange')\n    + p9.scale_y_continuous(labels=lambda labels: [f\"{label:.0%}\" for label in labels])\n    + p9.scale_x_continuous(labels=lambda labels: [f\"1 star\" if label==1 else f\"{label:.0f} stars\" for label in labels])\n    + p9.coord_flip()\n    + p9.theme_bw()\n    + p9.theme(\n        panel_border = p9.element_blank(),\n        panel_grid = p9.element_blank(),\n    )\n    + p9.labs(x=\"\", y=\"\", title=\"Amazon ratings for lens\")\n)"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/new_blog_post/post.html",
    "href": "posts/new_blog_post/post.html",
    "title": "This is a dummy blog posts",
    "section": "",
    "text": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam suscipit est nec dui eleifend, at dictum elit ullamcorper. Aliquam feugiat dictum bibendum. Praesent fermentum laoreet quam, cursus volutpat odio dapibus in. Fusce luctus porttitor vehicula. Donec ac tortor nisi. Donec at lectus tortor. Morbi tempor, nibh non euismod viverra, metus arcu aliquet elit, sed fringilla urna leo vel purus.\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nam suscipit est nec dui eleifend, at dictum elit ullamcorper. Aliquam feugiat dictum bibendum. Praesent fermentum laoreet quam, cursus volutpat odio dapibus in. Fusce luctus porttitor vehicula. Donec ac tortor nisi. Donec at lectus tortor. Morbi tempor, nibh non euismod viverra, metus arcu aliquet elit, sed fringilla urna leo vel purus.\n\n\nThis is inline code plus a small code chunk."
  },
  {
    "objectID": "posts/new_blog_post/post.html#merriweather",
    "href": "posts/new_blog_post/post.html#merriweather",
    "title": "This is a dummy blog posts",
    "section": "",
    "text": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam suscipit est nec dui eleifend, at dictum elit ullamcorper. Aliquam feugiat dictum bibendum. Praesent fermentum laoreet quam, cursus volutpat odio dapibus in. Fusce luctus porttitor vehicula. Donec ac tortor nisi. Donec at lectus tortor. Morbi tempor, nibh non euismod viverra, metus arcu aliquet elit, sed fringilla urna leo vel purus.\n\n\nThis is inline code plus a small code chunk."
  },
  {
    "objectID": "posts/ggplot2-tips/making-categorical-variables.html",
    "href": "posts/ggplot2-tips/making-categorical-variables.html",
    "title": "Forcing Variables to be Categorical",
    "section": "",
    "text": "Problem\nPlotnine assumes that numeric variables are continuous, rather than discrete. When plotting, some attributes require discrete / categorical variables (e.g. shape). Some variables can support either continuous or discrete features (e.g. size, colour), but the legends can be clearer for discrete variables.\nExamples of where a numeric feature is categorical:\n\nCell ids in A/B tests (e.g. cell 1 is control, cell 2 is treatment)\nSKU ids (SKU 542354 and SKU 542355 should not be considered “close”, they are two arbitrary numbers that label the products)\n\nThe example that I will use here is the number of cylinders in a car in the mtcars dataset.\n\n\nSolution\nUse \"factor(variable_name)\" in the athestics, rather than just \"variable_name\".\n\n\nExample\n\nimport plotnine as p9\nfrom plotnine.data import mtcars \n\n# Example without factor, cylinders are discrete but the colour scale is \n# continuous \n(\n    p9.ggplot(mtcars, p9.aes(x='mpg', y='wt', color='cyl'))\n    + p9.geom_point()\n    + p9.theme_bw()\n)\n\n\n\n\nAn example that doesn’t use factor, so the color shows as a gradient\n\n\n\n\nUsing \"factor(cyl)\" to force the integer number of cylinders to be seen as discrete, even though it is a numeric variable.\n\n(\n    p9.ggplot(mtcars, p9.aes(x='mpg', y='wt', color='factor(cyl)'))\n    + p9.geom_point()\n    + p9.theme_bw()\n)\n\n\n\n\nAn example using factor; colours show discretely and are easier to identify\n\n\n\n\n\n(\n    p9.ggplot(mtcars, p9.aes(x='mpg', y='wt', color='factor(cyl)'))\n    + p9.geom_point()\n    + p9.theme_bw()\n    + p9.scale_color_discrete(name=\"Cylinders\")\n)\n\n\n\n\nAn example using factor and renaming the colour scale to something readable"
  },
  {
    "objectID": "posts/ggplot2-tips/making-manual-error-bars.html",
    "href": "posts/ggplot2-tips/making-manual-error-bars.html",
    "title": "Making manual error bars / error regions",
    "section": "",
    "text": "Problem\nThere are lots of examples of being able to do a linear regression, and have plotnine draw the region of uncertainity automatically.\nThere are fewer examples (or they are harder to find) of how to add error bars or error regions that you have already calculated.\n\n\nSolution\nFor error regions, we use geom_ribbon:\np9.geom_ribbon(mapping=p9.aes(ymin='columnname', ymax='columnname'))\nFor error bars, we use geom_errorbar or geom_pointrange:\np9.geom_errorbar(mapping=p9.aes(ymin='columnname', ymax='columnname'))\np9.geom_pointrange(mapping=p9.aes(ymin='columnname', ymax='columnname'))\nThe difference is that the geom_errorbar draws crossbars at the top and bottom, while geom_pointrange only draws the vertical line.\n\n\nExample"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "ggplot-series.html",
    "href": "ggplot-series.html",
    "title": "Series: ggplot2-tips",
    "section": "",
    "text": "Changing labels to percentages\n\n\n\n\n\nCustomizing the labels on a scale is one of the things that is different from ggplot. We use a function to format the label.\n\n\n\n\n\nApr 29, 2024\n\n\n1 min\n\n\n\n\n\n\n\nMaking manual error bars / error regions\n\n\n\n\n\nShows how to add error bars/regions manually to plots, both as a region of uncertainty, and on individual data points.\n\n\n\n\n\nApr 28, 2024\n\n\n1 min\n\n\n\n\n\n\n\nMaking dual bar charts\n\n\n\n\n\nPopulations pyramids often show not just the number of people in each age bracket, but also seggregate it by gender.\n\n\n\n\n\nApr 28, 2024\n\n\n1 min\n\n\n\n\n\n\n\nForcing Variables to be Categorical\n\n\n\n\n\nPlotnine will treat numeric quantities as continuous, and generators continuous legends. We can use ‘factor’ to force the variable to be treated as cateogrical.\n\n\n\n\n\nApr 28, 2024\n\n\n1 min\n\n\n\n\n\n\nNo matching items"
  }
]